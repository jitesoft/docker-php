stages:
  - versions
  - prebuild
  - verify
  - build

versions:
  stage: versions
  variables:
    GIT_STRATEGY: none
    PHP_MINORS: "3 2 1"
  before_script:
    - apk add --no-cache grep
    - mkdir versions
  script:
    - |
      for minor in $PHP_MINORS; do
        wget -qO- https://www.php.net/downloads.php | grep -oP "(?<=>php-)([7]\.[${minor}]\.[0-9]{1,2})" | awk 'NR==1{print $1}' >> versions.txt
      done;
  only:
    refs:
      - master
  artifacts:
    paths:
      - versions.txt
    expire_in: 5 days

gpg:import:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: prebuild
  before_script:
    - apk add --no-cache gnupg linux-headers
  script:
    - |
      if [[ "$(cat keysum.txt | md5sum -c)" ]]
      then
        echo "Keys already imported."
      else
        for key in `cat gpg-keys.txt`; do
          gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
          gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}";
        done
        gpg --export > keys.out
        md5sum gpg-keys.txt | tee keysum.txt
      fi
  cache:
    key: php.gpg.keyring
    paths:
      - keys.out
      - keysum.txt
  artifacts:
    paths:
      - keys.out
    expire_in: 5 days
  tags:
    - jitesoft

download:
  stage: prebuild
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  dependencies:
    - versions
  before_script:
    - apk add --no-cache curl
  script:
    - mkdir versions
    - |
      for version in `cat versions.txt`; do
        curl -L https://www.php.net/get/php-${version}.tar.xz/from/this/mirror -o versions/php-${version:0:3}.tar.xz;
        curl -L https://www.php.net/get/php-${version}.tar.xz.asc/from/this/mirror -o versions/php-${version:0:3}.tar.xz.asc;
      done;
  artifacts:
    paths:
      - versions/*.tar.xz
    expire_in: 5 days
  tags:
    - jitesoft

gpg:verify:
  stage: verify
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  dependencies:
    - download
    - gpg:import
  before_script:
    - apk add --no-cache gnupg curl grep
    - gpg --import keys.out
  script:
    - for i in versions/*.tar.xz ; do gpg --verify ${i}.asc ${i} ; done
  tags:
    - jitesoft

.build:fpm:
  variables:
    PHP_VERSION: ""
    TAGS: ""
  dependencies:
    - versions
    - gpg:verify
    - download
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker:latest
  services:
    - registry.gitlab.com/jitesoft/dockerfiles/docker/dind:latest
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - cp versions/php-${PHP_VERSION}.tar.xz ./php.tar.xz
  script:
    - FULL_VERSION=$(grep ${PHP_VERSION} versions.txt)
    - docker build -t ${CI_REGISTRY_IMAGE}/fpm:${PHP_VERSION} --build-arg PHP_VERSION="${FULL_VERSION}" --build-arg EXTRA_PHP_ARGS="--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi" --build-arg BUILD_TYPE="fpm"
    - docker push ${CI_REGISTRY_IMAGE}/fpm:${PHP_VERSION}
    - TAGS="${TAGS} ${FULL_VERSION}"
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}/fpm:${PHP_VERSION} ${CI_REGISTRY_IMAGE}/fpm:${tag}
        docker push ${CI_REGISTRY_IMAGE}/fpm:${tag}
      done
  tags:
    - jitesoft

.build:cli:
  variables:
    PHP_VERSION: ""
    TAGS: ""
  dependencies:
    - gpg:verify
    - download
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker:latest
  services:
    - registry.gitlab.com/jitesoft/dockerfiles/docker/dind:latest
  before_script:
    - echo ${CI_JOB_TOKEN} | docker login -u gitlab-ci-token registry.gitlab.com --password-stdin
    - cp versions/php-${PHP_VERSION}.tar.xz ./php.tar.xz
  script:
    - FULL_VERSION=$(grep ${PHP_VERSION} versions.txt)
    - docker build -t ${CI_REGISTRY_IMAGE}/cli:${PHP_VERSION} --build-arg PHP_VERSION="${FULL_VERSION}" --build-arg BUILD_TYPE="cli"
    - docker push ${CI_REGISTRY_IMAGE}/cli:${PHP_VERSION}
    - TAGS="${TAGS} ${FULL_VERSION}"
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}/cli:${PHP_VERSION} ${CI_REGISTRY_IMAGE}/cli:${tag}
        docker push ${CI_REGISTRY_IMAGE}/cli:${tag}
      done
  tags:
    - jitesoft

build:cli:7.3:
  extends: .build:cli
  variables:
    PHP_VERSION: "7.3"
    TAGS: "7.3 7.3-cli latest latest-cli stable stable-cli cli"

build:cli:7.2:
  extends: .build:cli
  variables:
    PHP_VERSION: "7.2"
    TAGS: "7.2 7.2-cli"

build:cli:7.1:
  extends: .build:cli
  variables:
    PHP_VERSION: "7.1"
    TAGS: "7.1 7.1-cli"

build:fpm:7.3:
  extends: .build:fpm
  variables:
    PHP_VERSION: "7.3"
    TAGS: "7.3-fpm fpm latest-fpm stable-fpm"

build:fpm:7.2:
  extends: .build:fpm
  variables:
    PHP_VERSION: "7.2"
    TAGS: "7.2-fpm"

build:fpm:7.1:
  extends: .build:fpm
  variables:
    PHP_VERSION: "7.1"
    TAGS: "7.1-fpm"
