include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

stages:
  - build
  - containerize

check:
  stage: .pre
  parallel:
    matrix:
      - { MINOR: "7.3", GREP_EXP: '(?<=>php-)([7]\.[3]\.[0-9]{1,2})', TAGS: "" }
      - { MINOR: "7.4", GREP_EXP: '(?<=>php-)([7]\.[4]\.[0-9]{1,2})', TAGS: "7" }
      - { MINOR: "8.0", GREP_EXP: '(?<=>php-)([8]\.[0]\.[0-9]{1,2})', TAGS: "latest,8" }
  variables:
    GIT_STRATEGY: none
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - touch version${MINOR}.txt
    - FULL_VERSION=$(wget -qO- https://www.php.net/downloads.php | grep -oP "${GREP_EXP}" | sort -V -f | tail -n1)
      if [ "$(cat version${MINOR}.txt)" != "${FULL_VERSION}" ] || [ -n "${FORCE_BUILD}" ]; then
        echo "Triggering build of ${FULL_VERSION}"
        curl \
          -F token=${CI_JOB_TOKEN} \
          -F ref=master \
          -F "variables[PHP_KEY]=${MINOR}" \
          -F "variables[VERSION]=${FULL_VERSION}" \
          -F "variables[BUILD]=true" \
          -F "variables[DOWNLOAD_URL]=https://www.php.net/get/php-${FULL_VERSION}.tar.xz/from/this/mirror" \
          https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "Triggering scan of ${FULL_VERSION}"
        curl \
          -F token=${CI_JOB_TOKEN} \
          -F ref=master \
          -F "variables[VERSION]=${FULL_VERSION}" \
          -F "variables[SCAN]=true" \
          https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    policy: pull
    key: php-versions
    paths:
      - version${MINOR}.txt

gpg:import:
  rules:
    - changes:
        - gpg-keys.txt
      when: always
    - when: never
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: .pre
  script:
    - if [ -f keys.out ]; then gpg --import keys.out; fi
    - |
      for key in `cat gpg-keys.txt`; do
        gpg --list-keys ${key} || (gpg --keyserver pgp.mit.edu --recv-keys "${key}" || gpg --keyserver keyserver.pgp.com --recv-keys "${key}" || gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}")
      done
    - gpg --export > keys.out
  cache:
    key: php.gpg.keyring
    paths:
      - keys.out

download:
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  stage: .pre
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - echo "Downloading ${VERSION}"
    - curl -sSL "${DOWNLOAD_URL}" -o php.tar.xz;
    - curl -sSL "$(echo $DOWNLOAD_URL | sed 's/tar.xz/tar.xz.asc/g')" -o php.tar.xz.asc;
    - gpg --import keys.out
    - gpg --verify php.tar.xz.asc php.tar.xz
  artifacts:
    paths:
      - php.tar.xz
    expire_in: 1 day
  cache:
    policy: pull
    key: php.gpg.keyring
    paths:
      - keys.out

.build:
  parallel:
    matrix:
      - { TYPE_FLAGS: "", BUILD_TYPE: "cli" }
      - { TYPE_FLAGS: "--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data", BUILD_TYPE: "fpm" }
  image: registry.gitlab.com/jitesoft/dockerfiles/misc/buildbase:latest
  stage: build
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  before_script:
    - export CCACHE_DIR="${CI_PROJECT_DIR}/ccache"
    - apk add --no-cache oniguruma-dev argon2-dev curl-dev libedit-dev libsodium-dev libxml2-dev openssl-dev sqlite-dev dpkg-dev
    - if [ ! -d "ccache" ]; then mkdir ccache; fi
    - export PATH="/usr/lib/ccache/bin:$PATH"
    - ccache -s
    - export CPPFLAGS="${CPPFLAGS} -fstack-protector-strong -fpic -fpie -O2"
    - export CFLAGS="${CFLAGS} -fstack-protector-strong -fpic -fpie -O2"
    - mkdir src
    - tar -Jxhf php.tar.xz -C src/ --strip-components=1
    - addgroup -g 82 -S www-data && adduser -u 82 -D -S -G www-data www-data
  script:
    - echo "Building ${VERSION}"
    - cd src
    - EXTRA="--with-pear"
    # If the php version is 7.3 or lower, it requires pcre and libxml flags.
    # And if its 7.4 or above, the --with-pear flag is required to include pear.
    - if [ "${VERSION}" == "7.3" ]; then EXTRA="--with-pcre-regex --with-libxml-dir"; fi
    - |
      ./configure ${TYPE_FLAGS} \
        --prefix=/usr/local \
        --disable-short-tags \
        --build="$(cat /etc/apk/arch)-linux-musl" \
        --host="$(cat /etc/apk/arch)-linux-musl" \
        --with-config-file-path=/usr/local/etc/php \
        --with-config-file-scan-dir=/usr/local/etc/php/conf.d \
        --enable-option-checking=fatal \
        --with-openssl \
        --with-mhash \
        --with-sodium \
        --with-password-argon2 \
        --with-mysqli \
        --with-pdo-mysql \
        --with-pdo-sqlite=/usr \
        --with-sqlite3=/usr \
        --with-zlib \
        --with-zlib-dir \
        --with-curl \
        --enable-exif \
        --enable-calendar \
        --enable-ftp \
        --enable-mbstring \
        --enable-mysqlnd \
        ${EXTRA}
    - make -j -i -l V= | awk 'NR%20==0 {print NR,$0}'
    - find -type f -name '*.a' -delete
    - make install
    - cp php.ini-* /usr/local/
  after_script:
    - ccache -s
    - rm -f /usr/local/bin/phpdbg
    - cp scripts/* /usr/local/bin/
    - $(cd /usr/local && tar -czf /tmp/php-${ARCH}-${BUILD_TYPE}.tar.gz *)
    - mkdir binaries
    - mv /tmp/php-${ARCH}-${BUILD_TYPE}.tar.gz binaries/
  cache:
    paths:
      - ccache
    key: "php.build.ccache-${ARCH}-${BUILD_TYPE}-${PHP_KEY}"
  artifacts:
    paths:
      - binaries/
    when: on_success
    expire_in: 1 day

build:amd:
  tags:
    - "native-amd64"
  extends: .build
  variables:
    ARCH: "amd64"

build:arm:
  tags:
    - "native-aarch64"
  extends: .build
  variables:
    ARCH: "arm64"

.containerize:
  needs:
    - job: build:amd
      artifacts: true
    - job: build:arm
      artifacts: true
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: containerize
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - docker buildx build --platform linux/amd64,linux/arm64 --progress plain --push ${TAG_LIST} --build-arg PHP_MINOR="${PHP_KEY}" --build-arg PHP_VERSION="${VERSION}" --build-arg BUILD_TYPE="${PHP_TYPE}" .
  tags: [ buildx, protected ]

containerize.cli:
  extends: .containerize
  variables:
    PHP_TYPE: "cli"
  before_script:
    - |
      INCLUDE_TAGS=""
      if [ "${PHP_KEY}" == "${LATEST}" ]; then
        INCLUDE_TAGS="$(helper ${CI_REGISTRY_IMAGE}/cli,ghcr.io/jitesoft/php,jitesoft/php latest,stable) $(helper jitesoft/php,ghcr.io/jitesoft/php latest-cli,stable-cli)"
      fi
    - GITLAB_TAGS="$(helper ${CI_REGISTRY_IMAGE}/cli ${VERSION},${PHP_KEY})"
    - COMMON_TAGS="$(helper jitesoft/php,ghcr.io/jitesoft/php ${VERSION},${PHP_KEY},${VERSION}-cli,${PHP_KEY}-cli)"
    - TAG_LIST="${GITLAB_TAGS} ${COMMON_TAGS} ${INCLUDE_TAGS}"

containerize.fpm:
  extends: .containerize
  variables:
    PHP_TYPE: "fpm"
  before_script:
    - printf 'EXPOSE 9000\nCMD ["php-fpm"]' >> Dockerfile
    - |
      INCLUDE_TAGS=""
      if [ "${PHP_KEY}" == "${LATEST}" ]; then
        INCLUDE_TAGS="$(helper ${CI_REGISTRY_IMAGE}/fpm latest,stable) $(helper ghcr.io/jitesoft/php,jitesoft/php latest-fpm,stable-fpm)"
      fi
    - GITLAB_TAGS="$(helper ${CI_REGISTRY_IMAGE}/fpm ${VERSION},${PHP_KEY})"
    - COMMON_TAGS="$(helper jitesoft/php,ghcr.io/jitesoft/php ${VERSION}-fpm,${PHP_KEY}-fpm)"
    - TAG_LIST="${GITLAB_TAGS} ${COMMON_TAGS} ${INCLUDE_TAGS}"

create:cache:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: .post
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - echo "${VERSION}" > "version${PHP_KEY}.txt"
  cache:
    key: php-versions
    policy: pull-push
    paths:
      - version8.0.txt
      - version7.4.txt
      - version7.3.txt

scan:
  stage: .post
  extends: .scan.container.trivy.remote
  rules:
    - if: "$SCAN"
      when: always
    - if: "$BUILD"
      when: on_success
    - when: never
  parallel:
    matrix:
      - { IMAGE: "fpm" }
      - { IMAGE: "cli" }
  before_script:
    - export SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}/${IMAGE}:${VERSION}"

trigger:
  stage: .post
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  trigger:
    project: jitesoft/dockerfiles/composer-alpine
    branch: master
